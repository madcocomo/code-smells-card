<?xml version="1.0"?> 
<smells>
    <smell>
        <name>Alternative Classes with Different Interfaces</name>
        <description>occurs when the interfaces of two classes are different and yet the classes are quite similar. If you can find the similarities between the two classes, you can often refactor the classes to make them share a common interface [F 85, K 43]</description>
        <refactorings>
            <refactoring>Unify Interfaces with Adapter [K 247]</refactoring>
            <refactoring>Rename Method [F 273]</refactoring>
            <refactoring>Move Method [F 142]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Combinatorial Explosion</name>
        <description>A subtle form of duplication, this smell exists when numerous pieces of code do the same thing using different combinations of data or behavior. [K 45]</description>
        <refactorings>
            <refactoring>Replace Implicit Language with Interpreter [K 269]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Comments (a.k.a. Deodorant)</name>
        <description>Comments (a.k.a. Deodorant): When you feel like writing a comment,  first try &quot;to refactor so that the comment becomes superfluous&quot; [F 87]</description>
        <refactorings>
            <refactoring>Rename Method [F 273]</refactoring>
            <refactoring>Extract Method [F 110]</refactoring>
            <refactoring>Introduce Assertion [F 267]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Conditional Complexity</name>
        <description>Conditional logic is innocent in its infancy, when it's simple to understand and contained within a few lines of code. Unfortunately, it rarely ages well.  You implement several new features and suddenly your conditional logic becomes complicated and expansive. [K 41]</description>
        <refactorings>
            <refactoring>Introduce Null Object [F 260,  K 301]</refactoring>
            <refactoring>Move Embellishment to Decorator [K 144]</refactoring>
            <refactoring>Replace Conditional Logic with Strategy [K 129]</refactoring>
            <refactoring>Replace State-Altering Conditionals with State [K 166]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Data Class</name>
        <description>Classes that have fields, getting and setting methods for the fields, and nothing else. Such classes are dumb data holders and are almost certainly being manipulated in far too much detail by other classes. [F 86]</description>
        <refactorings>
            <refactoring>Move Method [F 142]</refactoring>
            <refactoring>Encapsulate Field [F 206]</refactoring>
            <refactoring>Encapsulate Collection [F 208]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Data Clumps</name>
        <description>Bunches of data that that hang around together really ought to be made into their own object. A good test is to consider deleting one of the data values: if you did this, would the others make any sense? If they don't, it's a sure sign that you have an object that's dying to be born. [F 81]</description>
        <refactorings>
            <refactoring>Extract Class [F 149]</refactoring>
            <refactoring>Preserve Whole Object [F 288]</refactoring>
            <refactoring>Introduce Parameter Object [F 295]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Divergent Change</name>
        <description>Occurs when one class is commonly changed in different ways for different reasons. Separating these divergent responsibilities decreases the chance that one change could affect another and lower maintenance costs. [F 79]</description>
        <refactorings>
            <refactoring>Extract Class [F 149]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Duplicated Code</name>
        <description>Duplicated code is the most pervasive and pungent smell in software.  It tends to be either explicit or subtle. Explicit duplication exists in identical code, while subtle duplication exists in structures or processing steps that are outwardly different, yet essentially the same. [F76, K 39]</description>
        <refactorings>
            <refactoring>Chain Constructors [K 340]</refactoring>
            <refactoring>Extract Composite [K 214]</refactoring>
            <refactoring>Extract Method [F 110]</refactoring>
            <refactoring>Extract Class [F 149]</refactoring>
            <refactoring>Form Template Method [F 345, K 205]</refactoring>
            <refactoring>Introduce Null Object [F 260, K 301]</refactoring>
            <refactoring>Introduce Polymorphic Creation with Factory Method [K 88]</refactoring>
            <refactoring>Pull Up Method [F 322]</refactoring>
            <refactoring>Pull Up Field [F 320]</refactoring>
            <refactoring>Replace One/Many Distinctions with Composite [K 224]</refactoring>
            <refactoring>Substitue Algorithm [F 139]</refactoring>
            <refactoring>Unify Interfaces with Adapter [K 247]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Feature Envy</name>
        <description>Data and behavior that acts on that data belong together. When a method makes too many calls to other classes to obtain data or functionality, Feature Envy is in the air. [F 80]</description>
        <refactorings>
            <refactoring>Extract Method [F 110]</refactoring>
            <refactoring>Move Method [F 142]</refactoring>
            <refactoring>Move Field [F 146]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Freeloader (a.k.a. Lazy Class)</name>
        <description>A class that isn't doing enough to pay for itself should be eliminated. [F 83, K43]</description>
        <refactorings>
            <refactoring>Collapse Hierarchy [F 344]</refactoring>
            <refactoring>Inline Class [F 154]</refactoring>
            <refactoring>Inline Singleton [K 114]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Inappropriate Intimacy</name>
        <description>Sometimes classes become far too intimate and spend too much time delving into each others' private parts. We may not be prudes when it comes to people, but we think our classes should follow strict, puritan rules. Over-intimate classes need to be broken up as lovers were in ancient days. [F 85]</description>
        <refactorings>
            <refactoring>Move Method [F 142]</refactoring>
            <refactoring>Move Field [F 146]</refactoring>
            <refactoring>Change Bidirectional Association to Unidirectional Association [F 20 Extract Class [F 149]</refactoring>
            <refactoring>Hide Delegate [F 157]</refactoring>
            <refactoring>Replace Inheritance with Delegation [F 352]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Incomplete Library Class</name>
        <description>Occurs when responsibilities emerge in our code that clearly should be moved to a library class, but we are unable or unwilling to modify the library class to accept these new responsibilities. [F 86]</description>
        <refactorings>
            <refactoring>Introduce Foreign Method [F 162]</refactoring>
            <refactoring>Introduce Local Extension [F 164]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Indecent Exposure</name>
        <description>This smell indicates the lack of what David Parnas so famously termed information hiding [Parnas]. The smell occurs when methods or classes that ought not to be visible to clients are publicly visible to them. Exposing such code means that clients know about code that is unimportant or only indirectly important. This contributes to the complexity of a design. [K 42]</description>
        <refactorings>
            <refactoring>Encapsulate Classes with Factory [K 80]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Large Class</name>
        <description>Fowler and Beck note that the presence of too many instance variables usually indicates that a class is trying to do too much. In general, large classes typically contain too many responsibilities. [F 78, K 44]</description>
        <refactorings>
            <refactoring>Extract Class [F 149]</refactoring>
            <refactoring>Extract Subclass [F 330]</refactoring>
            <refactoring>Extract Interface [F 341]</refactoring>
            <refactoring>Replace Data Value with Object [F 175]</refactoring>
            <refactoring>Replace Conditional Dispatcher with Command [K 191]</refactoring>
            <refactoring>Replace Implicit Language with Interpreter [K 269]</refactoring>
            <refactoring>Replace State-Altering Conditionals with State [K 166]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Long Method</name>
        <description>In their description of this smell, Fowler and Beck explain several good reasons why short methods are superior to long methods. A principal reason involves the sharing of logic. Two long methods may very well contain duplicated code. Yet if you break those methods into smaller methods, you can often find ways for the two to share logic. Fowler and Beck also describe how small methods help explain code. If you don't understand what a chunk of code does and you extract that code to a small, well-named method, it will be easier to understand the original code. Systems that have a majority of small methods tend to be easier to extend and maintain because they're easier to understand and contain less duplication. [F 76, K 40]</description>
        <refactorings>
            <refactoring>Extract Method [F 110]</refactoring>
            <refactoring>Compose Method [K 123]</refactoring>
            <refactoring>Introduce Parameter Object [F 295]</refactoring>
            <refactoring>Move Accumulation to Collecting Parameter [K 313]</refactoring>
            <refactoring>Move Accumulation to Visitor [K 320]</refactoring>
            <refactoring>Decompose Conditional [F 238]</refactoring>
            <refactoring>Preserve Whole Object [F 288]</refactoring>
            <refactoring>Replace Conditional Dispatcher with Command [K 191]</refactoring>
            <refactoring>Replace Conditional Logic with Strategy [K 129]</refactoring>
            <refactoring>Replace Method with Method Object [F 135]</refactoring>
            <refactoring>Replace Temp with Query [F 120]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Long Parameter List</name>
        <description>Long lists of parameters in a method, though common in procedural code, are difficult to understand and likely to be volatile. Consider which objects this method really needs to do its job -it's okay to make the method to do some work to track down the data it needs. [F 78]</description>
        <refactorings>
            <refactoring>Replace Parameter with Method [F 292]</refactoring>
            <refactoring>Introduce Parameter Object [F 295]</refactoring>
            <refactoring>Preserve Whole Object [F 288]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Message Chains</name>
        <description>Occur when you see a long sequence of method calls or temporary variables to get some data. This chain makes the code dependent on the relationships between many potentially unrelated objects. [F 84]</description>
        <refactorings>
            <refactoring>Hide Delegate [F 157]</refactoring>
            <refactoring>Extract Method [F 110]</refactoring>
            <refactoring>Move Method [F 142]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Middle Man</name>
        <description>Delegation is good, and one of the key fundamental features of objects. But too much of a good thing can lead to objects that add no value, simply passing messages on to another object. [F 85]</description>
        <refactorings>
            <refactoring>Remove Middle Man [F 160]</refactoring>
            <refactoring>Inline Method [F 117]</refactoring>
            <refactoring>Replace Delegation with Inheritance [F 355]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Oddball Solution</name>
        <description>When a problem is solved one way throughout a system and the same problem is solved another way in the same system, one of the solutions is the oddball or inconsistent solution. The presence of this smell usually indicates subtly duplicated code.  [K 45]</description>
        <refactorings>
            <refactoring>Unify Interfaces with Adapter [K 247]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Parallel Inheritance Hierarchies</name>
        <description>This is really a special case of Shotgun Surgery -every time you make a subclass of one class, you have to make a subclass of another. [F 83]</description>
        <refactorings>
            <refactoring>Move Method [F 142]</refactoring>
            <refactoring>Move Field [F 146]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Primitive Obsession</name>
        <description>Primitives, which include integers, Strings, doubles, arrays and other low-level language elements, are generic because many people use them. Classes, on the other hand, may be as specific as you need them to be, since you create them for specific purposes. In many cases, classes provide a simpler and more natural way to model things than primitives. In addition, once you create a class, you'll often discover how other code in a system belongs in that class. Fowler and Beck explain how primitive obsession manifests itself when code relies too much on primitives. This typically occurs when you haven't yet seen how a higher-level abstraction can clarify or simplify your code.  [F 81, K 41]</description>
        <refactorings>
            <refactoring>Replace Data Value with Object [F 175]</refactoring>
            <refactoring>Encapsulate Composite with Builder [K 96]</refactoring>
            <refactoring>Introduce Parameter Object [F 295]</refactoring>
            <refactoring>Extract Class [F 149]</refactoring>
            <refactoring>Move Embellishment to Decorator [K 144]</refactoring>
            <refactoring>Replace Conditional Logic with Strategy [K 129]</refactoring>
            <refactoring>Replace Implicit Language with Interpreter [K 269]</refactoring>
            <refactoring>Replace Implicit Tree with Composite [K 178]</refactoring>
            <refactoring>Replace State-Altering Conditionals with State [K 166]</refactoring>
            <refactoring>Replace Type Code with Class [F 218,  K 286]</refactoring>
            <refactoring>Replace Type Code with State/Strategy [F 227]</refactoring>
            <refactoring>Replace Type Code with Subclasses [F 223]</refactoring>
            <refactoring>Replace Array With Object [F 186]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Refused Bequest</name>
        <description>This smell results from inheriting code you don't want. Instead of tolerating the inheritance, you write code to refuse the bequest&quot; &#45;-which leads to ugly,confusing code,to say the least. [F 87]</description>
        <refactorings>
            <refactoring>Push Down Field [F 329]</refactoring>
            <refactoring>
            </refactoring>
            <refactoring>Push Down Method [F 322]</refactoring>
            <refactoring>Replace Inheritance with Delegation [F 352]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Shotgun Surgery</name>
        <description>This smell is evident when you must change lots of pieces of code in different places simply to add a new or extended piece of behavior. [F 80]</description>
        <refactorings>
            <refactoring>Move Method [F 142]</refactoring>
            <refactoring>Move Field [F 146]</refactoring>
            <refactoring>Inline Class [F 154]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Solution Sprawl</name>
        <description>When code and/or data used in performing a responsibility becomes sprawled across numerous classes, solution sprawl is in the air. This smell often results from quickly adding a feature to a system without spending enough time simplifying and consolidating the design to best accommodate the feature. [K 43]</description>
        <refactorings>
            <refactoring>Move Creation Knowledge to Factory [K 68]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Speculative Generality</name>
        <description>This odor exists when you have generic or abstract code that isn't actually needed today. Such code often exists to support future behavior, which may or may not be necessary in the future. [F 83]</description>
        <refactorings>
            <refactoring>Collapse Hierarchy [F 344]</refactoring>
            <refactoring>Rename Method [F 273]</refactoring>
            <refactoring>Remove Parameter [F 277]</refactoring>
            <refactoring>Inline Class [F 154]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Switch Statement</name>
        <description>This smell exists when the same switch statement (or &quot;if...else if...else if&quot; statement) is duplicated across a system. Such duplicated code reveals a lack of object- orientation and a missed opportunity to rely on the elegance of polymorphism. [F 82, K 44]</description>
        <refactorings>
            <refactoring>Move Accumulation to Visitor [K 320]</refactoring>
            <refactoring>Replace Conditional Dispatcher with Command [K 191]</refactoring>
            <refactoring>Replace Conditional with Polymorphism [F 255]</refactoring>
            <refactoring>Replace Type Code with Subclasses [F 223]</refactoring>
            <refactoring>Replace Type Code with State/Strategy [F 227]</refactoring>
            <refactoring>Replace Parameter with Explicit Methods [F 285]</refactoring>
            <refactoring>Introduce Null Object [F 260,  K 301]</refactoring>
        </refactorings>
    </smell>
    <smell>
        <name>Temporary Field</name>
        <description>Objects sometimes contain fields that don't seem to be needed all the time. The rest of the time, the field is empty or contains irrelevant data, which is difficult to understand. This is often an alternative to Long Parameter List. [F 84]</description>
        <refactorings>
            <refactoring>Extract Class [F 149]</refactoring>
            <refactoring>Introduce Null Object [F 260,  K 301]</refactoring>
        </refactorings>
    </smell>
</smells>
